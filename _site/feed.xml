<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-04-12T11:57:44-04:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">My Incredible Website</title><subtitle>Thank you for visiting. Please remember to like, comment, and subscribe to my website.</subtitle><author><name>Ethan Harris</name></author><entry><title type="html">Problem 21: Amicable Numbers</title><link href="http://localhost:4000/euler-21/" rel="alternate" type="text/html" title="Problem 21: Amicable Numbers" /><published>2022-04-06T09:26:50-04:00</published><updated>2022-04-06T09:26:50-04:00</updated><id>http://localhost:4000/euler-21</id><content type="html" xml:base="http://localhost:4000/euler-21/">&lt;p&gt;Let d(&lt;em&gt;n&lt;/em&gt;) be defined as the sum of proper divisors of &lt;em&gt;n&lt;/em&gt; (numbers less than &lt;em&gt;n&lt;/em&gt; which divide evenly into &lt;em&gt;n&lt;/em&gt;).
If d(&lt;em&gt;a&lt;/em&gt;) = &lt;em&gt;b&lt;/em&gt; and d(&lt;em&gt;b&lt;/em&gt;) = &lt;em&gt;a&lt;/em&gt;, where &lt;em&gt;a&lt;/em&gt; ≠ &lt;em&gt;b&lt;/em&gt;, then &lt;em&gt;a&lt;/em&gt; and &lt;em&gt;b&lt;/em&gt; are an amicable pair and each of &lt;em&gt;a&lt;/em&gt; and &lt;em&gt;b&lt;/em&gt; are called amicable numbers.&lt;/p&gt;

&lt;p&gt;For example, the proper divisors of 220 are 1, 2, 4, 5, 10, 11, 20, 22, 44, 55 and 110; therefore d(220) = 284. The proper divisors of 284 are 1, 2, 4, 71 and 142; so d(284) = 220.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Evaluate the sum of all the amicable numbers under 10000.&lt;/strong&gt;
&lt;!--more--&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;language-py highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;CODE&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;details&gt; 
&lt;summary&gt;Click to reveal output&lt;/summary&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span class=&quot;n&quot;&gt;OUTPUT&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;/details&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://projecteuler.net/problem=21&quot;&gt;See problem 21 on projecteuler.net&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;</content><author><name>Ethan Harris</name></author><summary type="html">Let d(n) be defined as the sum of proper divisors of n (numbers less than n which divide evenly into n). If d(a) = b and d(b) = a, where a ≠ b, then a and b are an amicable pair and each of a and b are called amicable numbers. For example, the proper divisors of 220 are 1, 2, 4, 5, 10, 11, 20, 22, 44, 55 and 110; therefore d(220) = 284. The proper divisors of 284 are 1, 2, 4, 71 and 142; so d(284) = 220. Evaluate the sum of all the amicable numbers under 10000.</summary></entry><entry><title type="html">Problem 67: Maximum Path Sum II</title><link href="http://localhost:4000/euler-67/" rel="alternate" type="text/html" title="Problem 67: Maximum Path Sum II" /><published>2022-04-06T09:26:50-04:00</published><updated>2022-04-06T09:26:50-04:00</updated><id>http://localhost:4000/euler-67</id><content type="html" xml:base="http://localhost:4000/euler-67/">&lt;p&gt;By starting at the top of the triangle below and moving to adjacent numbers on the row below, the maximum total from top to bottom is 23.&lt;/p&gt;

&lt;p style=&quot;text-align:center;font-family:monospace&quot;&gt;&lt;span style=&quot;color:red&quot;&gt;&lt;b&gt;3&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color:red&quot;&gt;&lt;b&gt;7&lt;/b&gt;&lt;/span&gt; 4&lt;br /&gt;
2 &lt;span style=&quot;color:red&quot;&gt;&lt;b&gt;4&lt;/b&gt;&lt;/span&gt; 6&lt;br /&gt;
8 5 &lt;span style=&quot;color:red&quot;&gt;&lt;b&gt;9&lt;/b&gt;&lt;/span&gt; 3&lt;/p&gt;

&lt;p&gt;That is, 3 + 7 + 4 + 9 = 23.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Find the maximum total from top to bottom in &lt;a href=&quot;/assets/triangle.txt&quot;&gt;triangle.txt&lt;/a&gt;, a 15K text file containing a triangle with one-hundred rows.&lt;/strong&gt;
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; This is a much more difficult version of Problem 18. It is not possible to try every route to solve this problem, as there are 299 altogether! If you could check one trillion (1012) routes every second it would take over twenty billion years to check them all. There is an efficient algorithm to solve it. ;o)&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;language-py highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;CODE&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;details&gt; 
&lt;summary&gt;Click to reveal output&lt;/summary&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span class=&quot;n&quot;&gt;OUTPUT&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;/details&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://projecteuler.net/problem=67&quot;&gt;See problem 67 on projecteuler.net&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;</content><author><name>Ethan Harris</name></author><summary type="html">By starting at the top of the triangle below and moving to adjacent numbers on the row below, the maximum total from top to bottom is 23. 37 4 2 4 6 8 5 9 3 That is, 3 + 7 + 4 + 9 = 23. Find the maximum total from top to bottom in triangle.txt, a 15K text file containing a triangle with one-hundred rows.</summary></entry><entry><title type="html">Problem 20: Factorial Digit Sum</title><link href="http://localhost:4000/euler-20/" rel="alternate" type="text/html" title="Problem 20: Factorial Digit Sum" /><published>2022-04-06T09:26:49-04:00</published><updated>2022-04-06T09:26:49-04:00</updated><id>http://localhost:4000/euler-20</id><content type="html" xml:base="http://localhost:4000/euler-20/">&lt;p&gt;&lt;em&gt;n&lt;/em&gt;! means &lt;em&gt;n&lt;/em&gt; × (&lt;em&gt;n&lt;/em&gt; − 1) × … × 3 × 2 × 1&lt;/p&gt;

&lt;p&gt;For example, 10! = 10 × 9 × … × 3 × 2 × 1 = 3628800,
and the sum of the digits in the number 10! is 3 + 6 + 2 + 8 + 8 + 0 + 0 = 27.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Find the sum of the digits in the number 100!&lt;/strong&gt;
&lt;!--more--&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;language-py highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;CODE&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;details&gt; 
&lt;summary&gt;Click to reveal output&lt;/summary&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span class=&quot;n&quot;&gt;OUTPUT&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;/details&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://projecteuler.net/problem=20&quot;&gt;See problem 20 on projecteuler.net&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;</content><author><name>Ethan Harris</name></author><summary type="html">n! means n × (n − 1) × … × 3 × 2 × 1 For example, 10! = 10 × 9 × … × 3 × 2 × 1 = 3628800, and the sum of the digits in the number 10! is 3 + 6 + 2 + 8 + 8 + 0 + 0 = 27. Find the sum of the digits in the number 100!</summary></entry><entry><title type="html">Problem 19: Counting Sundays</title><link href="http://localhost:4000/euler-19/" rel="alternate" type="text/html" title="Problem 19: Counting Sundays" /><published>2022-04-06T09:26:48-04:00</published><updated>2022-04-06T09:26:48-04:00</updated><id>http://localhost:4000/euler-19</id><content type="html" xml:base="http://localhost:4000/euler-19/">&lt;p&gt;You are given the following information, but you may prefer to do some research for yourself.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1 Jan 1900 was a Monday.&lt;/li&gt;
  &lt;li&gt;Thirty days has September,&lt;br /&gt;
April, June and November.&lt;br /&gt;
All the rest have thirty-one,&lt;br /&gt;
Saving February alone,&lt;br /&gt;
Which has twenty-eight, rain or shine.&lt;br /&gt;
And on leap years, twenty-nine.&lt;/li&gt;
  &lt;li&gt;A leap year occurs on any year evenly divisible by 4, but not on a century unless it is divisible by 400.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;How many Sundays fell on the first of the month during the twentieth century (1 Jan 1901 to 31 Dec 2000)?&lt;/strong&gt;
&lt;!--more--&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;language-py highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;CODE&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;details&gt; 
&lt;summary&gt;Click to reveal output&lt;/summary&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span class=&quot;n&quot;&gt;OUTPUT&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;/details&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://projecteuler.net/problem=19&quot;&gt;See problem 19 on projecteuler.net&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;</content><author><name>Ethan Harris</name></author><summary type="html">You are given the following information, but you may prefer to do some research for yourself. 1 Jan 1900 was a Monday. Thirty days has September, April, June and November. All the rest have thirty-one, Saving February alone, Which has twenty-eight, rain or shine. And on leap years, twenty-nine. A leap year occurs on any year evenly divisible by 4, but not on a century unless it is divisible by 400. How many Sundays fell on the first of the month during the twentieth century (1 Jan 1901 to 31 Dec 2000)?</summary></entry><entry><title type="html">Problem 18: Maximum Path Sum I</title><link href="http://localhost:4000/euler-18/" rel="alternate" type="text/html" title="Problem 18: Maximum Path Sum I" /><published>2022-04-06T09:26:47-04:00</published><updated>2022-04-06T09:26:47-04:00</updated><id>http://localhost:4000/euler-18</id><content type="html" xml:base="http://localhost:4000/euler-18/">&lt;p&gt;By starting at the top of the triangle below and moving to adjacent numbers on the row below, the maximum total from top to bottom is 23.&lt;/p&gt;

&lt;p style=&quot;text-align:center;font-family:monospace&quot;&gt;&lt;span style=&quot;color:red&quot;&gt;&lt;b&gt;3&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color:red&quot;&gt;&lt;b&gt;7&lt;/b&gt;&lt;/span&gt; 4&lt;br /&gt;
2 &lt;span style=&quot;color:red&quot;&gt;&lt;b&gt;4&lt;/b&gt;&lt;/span&gt; 6&lt;br /&gt;
8 5 &lt;span style=&quot;color:red&quot;&gt;&lt;b&gt;9&lt;/b&gt;&lt;/span&gt; 3&lt;/p&gt;

&lt;p&gt;That is, 3 + 7 + 4 + 9 = 23.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Find the maximum total from top to bottom of the triangle below:&lt;/strong&gt;&lt;/p&gt;

&lt;p style=&quot;text-align:center;font-family:monospace&quot;&gt;75&lt;br /&gt;
95 64&lt;br /&gt;
17 47 82&lt;br /&gt;
18 35 87 10&lt;br /&gt;
20 04 82 47 65&lt;br /&gt;
19 01 23 75 03 34&lt;br /&gt;
88 02 77 73 07 63 67&lt;br /&gt;
99 65 04 28 06 16 70 92&lt;br /&gt;
41 41 26 56 83 40 80 70 33&lt;br /&gt;
41 48 72 33 47 32 37 16 94 29&lt;br /&gt;
53 71 44 65 25 43 91 52 97 51 14&lt;br /&gt;
70 11 33 28 77 73 17 78 39 68 17 57&lt;br /&gt;
91 71 52 38 17 14 91 43 58 50 27 29 48&lt;br /&gt;
63 66 04 68 89 53 67 30 73 16 69 87 40 31&lt;br /&gt;
04 62 98 27 23 09 70 98 73 93 38 53 60 04 23&lt;/p&gt;

&lt;!--more--&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; As there are only 16384 routes, it is possible to solve this problem by trying every route. However, &lt;a href=&quot;/euler-67/&quot;&gt;Problem 67&lt;/a&gt;, is the same challenge with a triangle containing one-hundred rows; it cannot be solved by brute force, and requires a clever method! ;o)&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;language-py highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;CODE&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;details&gt; 
&lt;summary&gt;Click to reveal output&lt;/summary&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span class=&quot;n&quot;&gt;OUTPUT&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;/details&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://projecteuler.net/problem=18&quot;&gt;See problem 18 on projecteuler.net&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;</content><author><name>Ethan Harris</name></author><summary type="html">By starting at the top of the triangle below and moving to adjacent numbers on the row below, the maximum total from top to bottom is 23. 37 4 2 4 6 8 5 9 3 That is, 3 + 7 + 4 + 9 = 23. Find the maximum total from top to bottom of the triangle below: 75 95 64 17 47 82 18 35 87 10 20 04 82 47 65 19 01 23 75 03 34 88 02 77 73 07 63 67 99 65 04 28 06 16 70 92 41 41 26 56 83 40 80 70 33 41 48 72 33 47 32 37 16 94 29 53 71 44 65 25 43 91 52 97 51 14 70 11 33 28 77 73 17 78 39 68 17 57 91 71 52 38 17 14 91 43 58 50 27 29 48 63 66 04 68 89 53 67 30 73 16 69 87 40 31 04 62 98 27 23 09 70 98 73 93 38 53 60 04 23</summary></entry><entry><title type="html">Problem 17: Number Letter Counts</title><link href="http://localhost:4000/euler-17/" rel="alternate" type="text/html" title="Problem 17: Number Letter Counts" /><published>2022-04-06T09:26:46-04:00</published><updated>2022-04-06T09:26:46-04:00</updated><id>http://localhost:4000/euler-17</id><content type="html" xml:base="http://localhost:4000/euler-17/">&lt;p&gt;If the numbers 1 to 5 are written out in words: one, two, three, four, five, then there are 3 + 3 + 5 + 4 + 4 = 19 letters used in total.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If all the numbers from 1 to 1000 (one thousand) inclusive were written out in words, how many letters would be used?&lt;/strong&gt;
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Do not count spaces or hyphens. For example, 342 (three hundred and forty-two) contains 23 letters and 115 (one hundred and fifteen) contains 20 letters. The use of “and” when writing out numbers is in compliance with British usage.&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;language-py highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;CODE&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;details&gt; 
&lt;summary&gt;Click to reveal output&lt;/summary&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span class=&quot;n&quot;&gt;OUTPUT&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;/details&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://projecteuler.net/problem=17&quot;&gt;See problem 17 on projecteuler.net&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;</content><author><name>Ethan Harris</name></author><summary type="html">If the numbers 1 to 5 are written out in words: one, two, three, four, five, then there are 3 + 3 + 5 + 4 + 4 = 19 letters used in total. If all the numbers from 1 to 1000 (one thousand) inclusive were written out in words, how many letters would be used?</summary></entry><entry><title type="html">Problem 16: Power Digit Sum</title><link href="http://localhost:4000/euler-16/" rel="alternate" type="text/html" title="Problem 16: Power Digit Sum" /><published>2022-04-06T09:26:45-04:00</published><updated>2022-04-06T09:26:45-04:00</updated><id>http://localhost:4000/euler-16</id><content type="html" xml:base="http://localhost:4000/euler-16/">&lt;p&gt;\(2^{15} = 32768\) and the sum of its digits is \(3 + 2 + 7 + 6 + 8 = 26\).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is the sum of the digits of the number \(2^{1000}\)?&lt;/strong&gt;
&lt;!--more--&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;language-py highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;details&gt; 
&lt;summary&gt;Click to reveal output&lt;/summary&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span class=&quot;n&quot;&gt;OUTPUT&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;/details&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://projecteuler.net/problem=16&quot;&gt;See problem 16 on projecteuler.net&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;</content><author><name>Ethan Harris</name></author><summary type="html">\(2^{15} = 32768\) and the sum of its digits is \(3 + 2 + 7 + 6 + 8 = 26\). What is the sum of the digits of the number \(2^{1000}\)?</summary></entry><entry><title type="html">Problem 15: Lattice Paths</title><link href="http://localhost:4000/euler-15/" rel="alternate" type="text/html" title="Problem 15: Lattice Paths" /><published>2022-04-06T09:26:44-04:00</published><updated>2022-04-06T09:26:44-04:00</updated><id>http://localhost:4000/euler-15</id><content type="html" xml:base="http://localhost:4000/euler-15/">&lt;p&gt;Starting in the top left corner of a 2×2 grid, and only being able to move to the right and down, there are exactly 6 routes to the bottom right corner.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/latticepaths.png&quot; alt=&quot;Lattice Paths&quot; style=&quot;display:block; margin-left:auto; margin-right:auto&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How many such routes are there through a 20×20 grid?&lt;/strong&gt;
&lt;!--more--&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;
This is a special one, because we don’t need to write any code to solve it!&lt;br /&gt;
&lt;em&gt;(That’s probably true for many of the others but I actually know how to do it for this one)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We can utilize properties of combinatorics to find the solution. First, let’s consider a much more
managable grid to better understand the problem. I’ll use a grid with 2 different dimensions to make things more clear,
but this works for a rectangular grid of any size or proportion.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/goldstar.png&quot; alt=&quot;2x3 Grid&quot; style=&quot;display:block; margin-left:auto; margin-right:auto&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this 2x3 grid, we know that no matter which path we choose, we &lt;em&gt;must&lt;/em&gt; ultimately move right three times
and down two times to reach the bottom right corner and get that enticing gold star.&lt;/p&gt;

&lt;p&gt;At this point, we can convert our moves into a much simpler format for solving: a string!
The path is always \(2+3=5\) moves long, so the string is 5 characters long. We can use R for a move right and D for a move down.&lt;/p&gt;

&lt;p style=&quot;text-align:center&quot;&gt;
&lt;b&gt;&lt;span style=&quot;color:Purple&quot;&gt;RRR&lt;/span&gt;&lt;span style=&quot;color:DarkCyan&quot;&gt;DD&lt;/span&gt;&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;If we had our 2 characters, R and D, and we could always choose one or the other to come next, we could describe all the paths we could make with \(2^5=32\).&lt;/p&gt;

&lt;p&gt;But we don’t. If we consider that we essentially have 5 characters, 3 R’s and 2 D’s, once we’ve picked one at any point in the sequence, our pool of remaining characters to choose is reduced by 1.
For that reason, we need to use factorials to describe how many permutations of characters can exist.&lt;/p&gt;

&lt;p&gt;Even though there are multiple R’s as well as D’s, for now we can consider them all unique elements.&lt;/p&gt;

&lt;p&gt;To get the number of ways you can arrange 5 unique &lt;em&gt;things&lt;/em&gt;, it’s simply \(5!=120\).&lt;br /&gt;
&lt;em&gt;(5 factorial, e.g. 5*4*3*2*1)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;However&lt;/strong&gt;, now we have redundancies to account for. \(5!\) alone describes this:&lt;/p&gt;

&lt;p style=&quot;text-align:center&quot;&gt;
&lt;b&gt;&lt;span style=&quot;color:Crimson&quot;&gt;R1 &lt;/span&gt;&lt;span style=&quot;color:Orange&quot;&gt;R2 &lt;/span&gt;&lt;span style=&quot;color:Gold&quot;&gt;R3 &lt;/span&gt;&lt;span style=&quot;color:DarkSeaGreen&quot;&gt;D4 &lt;/span&gt;&lt;span style=&quot;color:MediumSlateBlue&quot;&gt;D5&lt;/span&gt;&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;Meaning we’re counting that permutation as well as ones like this:&lt;/p&gt;

&lt;p style=&quot;text-align:center&quot;&gt;
&lt;b&gt;&lt;span style=&quot;color:Gold&quot;&gt;R3 &lt;/span&gt;&lt;span style=&quot;color:Crimson&quot;&gt;R1 &lt;/span&gt;&lt;span style=&quot;color:Orange&quot;&gt;R2 &lt;/span&gt;&lt;span style=&quot;color:MediumSlateBlue&quot;&gt;D5 &lt;/span&gt;&lt;span style=&quot;color:DarkSeaGreen&quot;&gt;D4&lt;/span&gt;&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;But of course, RRRDD is the same sequence regardless. Not all the characters are actually unique.
We don’t care ‘which’ R goes in which of the first three spots, or which D in the last two.&lt;/p&gt;

&lt;p&gt;So the number of redundancies we have is equivalent to the number of ways we can permute all the R’s &lt;strong&gt;AND&lt;/strong&gt; all the ways we can permute the D’s. &lt;strong&gt;“And”&lt;/strong&gt; here means we need to multiply,
because &lt;em&gt;all&lt;/em&gt; the R redundancies exist for &lt;em&gt;all&lt;/em&gt; the D redundancies.&lt;/p&gt;

\[3!*2!\]

&lt;p&gt;So now we have our total number of ways to permute 5 things, and all the redundancies we have in this case.
Remember that we get 5 by adding the dimensions of the grid, 3x2. The hard work is done, now we get to do the math.&lt;/p&gt;

\[{(3+2)! \over 3!*2!} = {5! \over 3!*2!}\]

&lt;p&gt;And there’s a fun way to divide factorials that makes things a little easier when doing them by hand.
Just decompose the factorials and cross out like numbers on either side! (Imagine that the overbar is crossing out the numbers)&lt;/p&gt;

\[{5*4*\overline{3*2*1} \over \overline{3*2*1}*2*1} = {5*4 \over 2*1} = {20 \over 2} = 10\]

&lt;p&gt;So there are 10 ways to build a 5-character string with three indentical R’s and 2 identical D’s. That means we have 10 paths that get us from the top left to the bottom right!
Really, from any corner to its diagonal opposite. To solve this for the 20x20 grid, let’s generalize how we solved the smaller one.&lt;/p&gt;

&lt;p&gt;We took the dimensions of the grid, which we can call \(n\) x \(m\), and took the factorial of their sum to get our total possible permutations.&lt;/p&gt;

\[(n+m)!\]

&lt;p&gt;We calculated our redundancies by finding the permutations of each set of similar moves, the same two numbers as before, and multiplying them.&lt;/p&gt;

\[n!*m!\]

&lt;p&gt;Then we accounted for redundancies by dividing them by our total. Putting it together gives us:&lt;/p&gt;

\[{(n+m)!} \over {n!*m!}\]

&lt;p&gt;Now all we need to do is plug in our numbers to get the solution below. And hey, you know what? If you made it this far, you can keep that gold star.&lt;/p&gt;

&lt;details&gt; 
&lt;summary&gt;Click to reveal solution&lt;/summary&gt;
$${(20+20)! \over 20!*20!} = 137,846,528,820$$
&lt;/details&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://projecteuler.net/problem=15&quot;&gt;See problem 15 on projecteuler.net&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;</content><author><name>Ethan Harris</name></author><summary type="html">Starting in the top left corner of a 2×2 grid, and only being able to move to the right and down, there are exactly 6 routes to the bottom right corner. How many such routes are there through a 20×20 grid?</summary></entry><entry><title type="html">Problem 14: Longest Collatz Sequence</title><link href="http://localhost:4000/euler-14/" rel="alternate" type="text/html" title="Problem 14: Longest Collatz Sequence" /><published>2022-04-06T09:26:43-04:00</published><updated>2022-04-06T09:26:43-04:00</updated><id>http://localhost:4000/euler-14</id><content type="html" xml:base="http://localhost:4000/euler-14/">&lt;p&gt;The following iterative sequence is defined for the set of positive integers:&lt;/p&gt;

&lt;p&gt;    n → n/2 (n is even)&lt;br /&gt;
    n → 3n + 1 (n is odd)&lt;/p&gt;

&lt;p&gt;Using the rule above and starting with 13, we generate the following sequence:&lt;/p&gt;

&lt;p style=&quot;text-align:center&quot;&gt;
13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1
&lt;/p&gt;

&lt;p&gt;It can be seen that this sequence (starting at 13 and finishing at 1) contains 10 terms. Although it has not been proved yet (Collatz Problem), it is thought that all starting numbers finish at 1.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Which starting number, under one million, produces the longest chain?&lt;/strong&gt;
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;NOTE: Once the chain starts the terms are allowed to go above one million.&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;language-py highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;CODE&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;details&gt; 
&lt;summary&gt;Click to reveal output&lt;/summary&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span class=&quot;n&quot;&gt;OUTPUT&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;/details&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://projecteuler.net/problem=14&quot;&gt;See problem 14 on projecteuler.net&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;</content><author><name>Ethan Harris</name></author><summary type="html">The following iterative sequence is defined for the set of positive integers:     n → n/2 (n is even)     n → 3n + 1 (n is odd) Using the rule above and starting with 13, we generate the following sequence: 13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1 It can be seen that this sequence (starting at 13 and finishing at 1) contains 10 terms. Although it has not been proved yet (Collatz Problem), it is thought that all starting numbers finish at 1. Which starting number, under one million, produces the longest chain?</summary></entry><entry><title type="html">Problem 13: Large Sum</title><link href="http://localhost:4000/euler-13/" rel="alternate" type="text/html" title="Problem 13: Large Sum" /><published>2022-04-06T09:26:42-04:00</published><updated>2022-04-06T09:26:42-04:00</updated><id>http://localhost:4000/euler-13</id><content type="html" xml:base="http://localhost:4000/euler-13/">&lt;p&gt;&lt;strong&gt;Work out the first ten digits of the sum of the following one-hundred 50-digit numbers.&lt;/strong&gt;&lt;/p&gt;

&lt;details&gt; 
&lt;summary&gt;Click to show numbers&lt;/summary&gt;
&lt;p style=&quot;text-align:center;font-family:monospace&quot;&gt;
37107287533902102798797998220837590246510135740250
46376937677490009712648124896970078050417018260538
74324986199524741059474233309513058123726617309629
91942213363574161572522430563301811072406154908250
23067588207539346171171980310421047513778063246676
89261670696623633820136378418383684178734361726757
28112879812849979408065481931592621691275889832738
44274228917432520321923589422876796487670272189318
47451445736001306439091167216856844588711603153276
70386486105843025439939619828917593665686757934951
62176457141856560629502157223196586755079324193331
64906352462741904929101432445813822663347944758178
92575867718337217661963751590579239728245598838407
58203565325359399008402633568948830189458628227828
80181199384826282014278194139940567587151170094390
35398664372827112653829987240784473053190104293586
86515506006295864861532075273371959191420517255829
71693888707715466499115593487603532921714970056938
54370070576826684624621495650076471787294438377604
53282654108756828443191190634694037855217779295145
36123272525000296071075082563815656710885258350721
45876576172410976447339110607218265236877223636045
17423706905851860660448207621209813287860733969412
81142660418086830619328460811191061556940512689692
51934325451728388641918047049293215058642563049483
62467221648435076201727918039944693004732956340691
15732444386908125794514089057706229429197107928209
55037687525678773091862540744969844508330393682126
18336384825330154686196124348767681297534375946515
80386287592878490201521685554828717201219257766954
78182833757993103614740356856449095527097864797581
16726320100436897842553539920931837441497806860984
48403098129077791799088218795327364475675590848030
87086987551392711854517078544161852424320693150332
59959406895756536782107074926966537676326235447210
69793950679652694742597709739166693763042633987085
41052684708299085211399427365734116182760315001271
65378607361501080857009149939512557028198746004375
35829035317434717326932123578154982629742552737307
94953759765105305946966067683156574377167401875275
88902802571733229619176668713819931811048770190271
25267680276078003013678680992525463401061632866526
36270218540497705585629946580636237993140746255962
24074486908231174977792365466257246923322810917141
91430288197103288597806669760892938638285025333403
34413065578016127815921815005561868836468420090470
23053081172816430487623791969842487255036638784583
11487696932154902810424020138335124462181441773470
63783299490636259666498587618221225225512486764533
67720186971698544312419572409913959008952310058822
95548255300263520781532296796249481641953868218774
76085327132285723110424803456124867697064507995236
37774242535411291684276865538926205024910326572967
23701913275725675285653248258265463092207058596522
29798860272258331913126375147341994889534765745501
18495701454879288984856827726077713721403798879715
38298203783031473527721580348144513491373226651381
34829543829199918180278916522431027392251122869539
40957953066405232632538044100059654939159879593635
29746152185502371307642255121183693803580388584903
41698116222072977186158236678424689157993532961922
62467957194401269043877107275048102390895523597457
23189706772547915061505504953922979530901129967519
86188088225875314529584099251203829009407770775672
11306739708304724483816533873502340845647058077308
82959174767140363198008187129011875491310547126581
97623331044818386269515456334926366572897563400500
42846280183517070527831839425882145521227251250327
55121603546981200581762165212827652751691296897789
32238195734329339946437501907836945765883352399886
75506164965184775180738168837861091527357929701337
62177842752192623401942399639168044983993173312731
32924185707147349566916674687634660915035914677504
99518671430235219628894890102423325116913619626622
73267460800591547471830798392868535206946944540724
76841822524674417161514036427982273348055556214818
97142617910342598647204516893989422179826088076852
87783646182799346313767754307809363333018982642090
10848802521674670883215120185883543223812876952786
71329612474782464538636993009049310363619763878039
62184073572399794223406235393808339651327408011116
66627891981488087797941876876144230030984490851411
60661826293682836764744779239180335110989069790714
85786944089552990653640447425576083659976645795096
66024396409905389607120198219976047599490197230297
64913982680032973156037120041377903785566085089252
16730939319872750275468906903707539413042652315011
94809377245048795150954100921645863754710598436791
78639167021187492431995700641917969777599028300699
15368713711936614952811305876380278410754449733078
40789923115535562561142322423255033685442488917353
44889911501440648020369068063960672322193204149535
41503128880339536053299340368006977710650566631954
81234880673210146739058568557934581403627822703280
82616570773948327592232845941706525094512325230608
22918802058777319719839450180888072429661980811197
77158542502016545090413245809786882778948721859617
72107838435069186155435662884062257473692284509516
20849603980134001723930671666823555245252804609722
53503534226472524250874054075591789781264330331690
&lt;/p&gt;
&lt;/details&gt;
&lt;!--more--&gt;

&lt;hr /&gt;

&lt;div class=&quot;language-py highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;raw&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# i just put numbers directly into file as a string
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;raw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# this just works i guess
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;Sum:&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;First 10:&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;details&gt; 
&lt;summary&gt;Click to reveal output&lt;/summary&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span class=&quot;n&quot;&gt;Sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5537376230390876637302048746832985971773659831892672&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;First&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5537376230&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;/details&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://projecteuler.net/problem=13&quot;&gt;See problem 13 on projecteuler.net&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;</content><author><name>Ethan Harris</name></author><summary type="html">Work out the first ten digits of the sum of the following one-hundred 50-digit numbers. Click to show numberssummary></entry></feed>